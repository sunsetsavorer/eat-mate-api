openapi: 3.1.0
info:
  version: '1'
  title: 'Eat Mate API'
  description: |
    Eat Mate API
  contact:
    name: 'github'
    url: 'https://github.com/sunsetsavorer'

tags:
  - name: 'Auth'
    description: 'authorization operations'
  - name: 'User'
    description: 'user operations'
  - name: 'Branch'
    description: 'branch operations'
  - name: 'Group'
    description: 'group operations'

paths:
  /v1/auth/signin/:
    post:
      summary: 'return JWT token'
      tags:
        - Auth
      requestBody:
        $ref: '#/components/requestBodies/Signin'
      responses:
        200:
          $ref: '#/components/responses/Signin'
        400:
          $ref: '#/components/responses/BadRequestError'
        422:
          $ref: '#/components/responses/ValidationError'

  /v1/users/me/:
    put:
      summary: 'update user'
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/UpdateUser'
      responses:
        200:
          $ref: '#/components/responses/EmptySuccess'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/ValidationError'
      security:
        - JWT: []

  /v1/branches/:
    get:
      summary: 'get branches'
      tags:
        - Branch
      responses:
        200:
          $ref: '#/components/responses/GetBranches'
        400:
          $ref: '#/components/responses/BadRequestError'
        422:
          $ref: '#/components/responses/ValidationError'
      parameters:
        - $ref: '#/components/schemas/PaginationPageQueryParameter'
        - $ref: '#/components/schemas/PaginationLimitQueryParameter'
        - $ref: '#/components/schemas/SearchQueryParameter'

  /v1/groups/:
    post:
      summary: 'create new group'
      tags:
        - Group
      requestBody:
        $ref: '#/components/requestBodies/CreateGroup'
      responses:
        200:
          $ref: '#/components/responses/CreateGroup'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/ValidationError'
      security:
        - JWT: []

    get:
      summary: 'get groups'
      tags:
        - Group
      responses:
        200:
          $ref: '#/components/responses/GetGroups'
        400:
          $ref: '#/components/responses/BadRequestError'
        422:
          $ref: '#/components/responses/ValidationError'
      parameters:
        - $ref: '#/components/schemas/PaginationPageQueryParameter'
        - $ref: '#/components/schemas/PaginationLimitQueryParameter'

  /v1/groups/{group_id}/:
    get:
      summary: 'get group detailed'
      tags:
        - Group
      responses:
        200:
          $ref: '#/components/responses/GetGroup'
        400:
          $ref: '#/components/responses/BadRequestError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/ValidationError'
      parameters:
        - $ref: '#/components/schemas/GroupIDRouteParameter'

components:
  schemas:
    PaginationPageQueryParameter:
      in: query
      name: page
      required: true
      schema:
        type: integer

    PaginationLimitQueryParameter:
      in: query
      name: page
      required: true
      schema:
        type: integer

    SearchQueryParameter:
      in: query
      name: query
      schema:
        type: string

    GroupIDRouteParameter:
      in: path
      name: group_id
      required: true
      schema:
        type: string
        format: uuid

    BaseErrorResponse:
      type: object
      properties:
        errors: {type: object}

    EmptySuccessResponse:
      type: object
      properties:
        data: {type: array}

    SigninRequestBody:
      type: object
      properties:
        telegram_id: {type: number}
        name: {type: string}
        photo_url: {type: string}
      required:
        - telegram_id
        - name

    SigninResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              $ref: '#/components/schemas/JWTToken'

    JWTToken:
      type: string

    UpdateUserRequestBody:
      type: object
      properties:
        name: {type: string}
        photo_url: {type: string}
      required:
        - name

    GetBranchesResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            branches:
              type: array
              items:
                $ref: '#/components/schemas/BranchResponseItem'
            pagination:
              type: object
              $ref: '#/components/schemas/PaginationResponse'

    BranchResponseItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        icon_path: {type: string}
        name: {type: string}
        address: {type: string}

    CreateGroupRequestBody:
      type: object
      properties:
        name: {type: string}
        selection_mode: {type: string}
        is_public: {type: boolean}
        branch_options:
          type: array
          items:
            $ref: '#/components/schemas/GroupBranchOption'
        branch_id:
          type: string
          format: uuid
      required:
        - name
        - selection_mode
        - is_public

    CreateGroupResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            group_id:
              type: string
              format: uuid

    GetGroupsResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            groups:
              type: array
              items:
                $ref: '#/components/schemas/GetGroupsResponseItem'
            pagination:
              type: object
              $ref: '#/components/schemas/PaginationResponse'

    GetGroupsResponseItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name: {type: string}
        selection_mode: {type: string}
        brand_name: {type: string}
        brand_icon_path: {type: string}
        address: {type: string}
        members:
          type: array
          items:
            $ref: '#/componensts/schema/GroupMember'

    GetGroupResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name: {type: string}
            selection_mode: {type: string}
            brand_name: {type: string}
            brand_icon_path: {type: string}
            address: {type: string}
            contact_phone: {type: string}
            members:
              type: array
              items:
                $ref: '#/components/schemas/GroupMember'
            branch_options:
              type: array
              items:
                $ref: '#/components/schemas/GroupBranchOption'

    GroupBranchOption:
      type: string
      format: uuid

    GroupMember:
      type: object
      properties:
        id: {type: number}
        name: {type: string}
        photo_url: {type: string}
        role: {type: string}

    PaginationResponse:
      type: object
      properties:
        page: {type: number}
        next_page: {type: number}
        last_page: {type: number}
        limit: {type:number}

  examples:
    BadRequestErrorResponse:
      value:
        errors:
          other: 'bad request'

    UnauthorizedErrorResponse:
      value:
        errors:
          other: 'not authorized'

    NotFoundErrorResponse:
      value:
        errors:
          other: 'not found'

    ValidationErrorResponse:
      value:
        errors:
          field1: 'this field is required'
          field2: 'this field has wrong format'

    EmptySuccessResponse:
      value:
        data: []

    SigninRequestBody:
      value:
        telegram_id: 576098928
        name: 'sunsetsavorer'
        photo_url: 'https://example.com/avatars/sunsetsavorer.svg'

    SigninResponse:
      value:
        data:
          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30'

    UpdateUserRequestBody:
      value:
        name: 'updated_sunsetsavorer'
        photo_url: 'https://example.com/avatars/updated_sunsetsavorer.svg'

    GetBranchesResponse:
      value:
        data:
          branches:
            - id: '6310cc48-4833-46c9-9464-da30ec2b117f'
              icon_path: '/icons/branches/kfc.svg'
              name: 'KFC'
              address: 'Pr Dovatora'
              contact_phone: '8 (800) 535-35-35'
            - id: '8c92f3ea-449a-4c40-a84e-03dd9fbdac59'
              icon_path: null
              name: 'Siria Bistro'
              address: 'Vladikavkazskaya Ulitsa, 35'
              contact_phone: '8 (918) 826-94-54'
          pagination:
            limit: 8
            page: 1
            next_page: 2
            last_page: 10

    CreateDefinedGroupRequestBody:
      value:
        name: 'Defined group'
        selection_mode: 'defined'
        is_public: true
        branch_id: '81320520-65da-41cf-9fa2-61392a24ec1d'

    CreateVotingGroupRequestBody:
      value:
        name: 'Voting group'
        selection_mode: 'voting'
        is_public: true
        branch_options:
          - '059c0f25-500e-47aa-84bd-6baefc8bb0e5'
          - '44473945-2bf4-407d-b943-4fadf091eb34'
          - '834ac556-35c3-45f7-a605-52694d5039eb'
          - '88b65e80-b236-4e5a-9721-12e244967898'
          - 'a0bbe075-a310-402b-8343-d4355616589f'

    CreateRandomGroupRequestBody:
      value:
        name: 'Random group'
        selection_mode: 'random'
        is_public: true
        branch_options:
          - '059c0f25-500e-47aa-84bd-6baefc8bb0e5'
          - '44473945-2bf4-407d-b943-4fadf091eb34'
          - '834ac556-35c3-45f7-a605-52694d5039eb'
          - '88b65e80-b236-4e5a-9721-12e244967898'
          - 'a0bbe075-a310-402b-8343-d4355616589f'

    CreateGroupResponse:
      value:
        data:
          group_id: '81320520-65da-41cf-9fa2-61392a24ec1d'

    GetGroupsResponse:
      value:
        data:
          groups:
            - id: '81320520-65da-41cf-9fa2-61392a24ec1d'
              name: 'Комната с выбранным местом'
              selection_mode: 'defined'
              brand_name: 'KFC'
              brand_icon_path: '/icons/branches/kfc.svg'
              address: 'kfc address'
              members:
                - id: 2312321123112
                  name: sunsetsavorer
                  photo_url: 'https://example.com/avatars/sunsetsavorer.svg'
                - id: 535435345345345
                  name: muhehe
                  photo_url: 'https://example.com/avatars/muhehe.svg'
                - id: 9808802342398
                  name: libint
                  photo_url: 'https://example.com/avatars/libint.svg'
            - id: '81320520-65da-41cf-9fa2-61392a24ec1d'
              name: 'Комната с голосованием'
              selection_mode: 'voting'
              members:
                - id: 2312321123112
                  name: sunsetsavorer
                  photo_url: 'https://example.com/avatars/sunsetsavorer.svg'
                - id: 535435345345345
                  name: muhehe
                  photo_url: 'https://example.com/avatars/muhehe.svg'
                - id: 9808802342398
                  name: libint
                  photo_url: 'https://example.com/avatars/libint.svg'
            - id: '81320520-65da-41cf-9fa2-61392a24ec1d'
              name: 'Рандомная комната'
              selection_mode: 'random'
              members:
                - id: 2312321123112
                  name: sunsetsavorer
                  photo_url: 'https://example.com/avatars/sunsetsavorer.svg'
                - id: 535435345345345
                  name: muhehe
                  photo_url: 'https://example.com/avatars/muhehe.svg'
                - id: 9808802342398
                  name: libint
                  photo_url: 'https://example.com/avatars/libint.svg'
          pagination:
            limit: 8
            page: 1
            next_page: 2
            last_page: 10

    GetDefinedGroupResponse:
      value:
        data:
          id: '81320520-65da-41cf-9fa2-61392a24ec1d'
          name: 'Комната с выбранным местом'
          selection_mode: 'defined'
          brand_name: 'KFC'
          brand_icon_path: '/icons/branches/kfc.svg'
          address: 'Pr. KFC'
          contact_phone: '79998886644'
          members:
            - id: 535435345345345
              name: muhehe
              photo_url: 'https://example.com/avatars/muhehe.svg'
              role: 'owner'
            - id: 2312321123112
              name: sunsetsavorer
              photo_url: 'https://example.com/avatars/sunsetsavorer.svg'
              role: 'participant'

    GetVotingGroupResponse:
      value:
        data:
          id: '81320520-65da-41cf-9fa2-61392a24ec1d'
          name: 'Комната с голосованием'
          selection_mode: 'voting'
          members:
            - id: 535435345345345
              name: muhehe
              photo_url: 'https://example.com/avatars/muhehe.svg'
              role: 'owner'
            - id: 2312321123112
              name: sunsetsavorer
              photo_url: 'https://example.com/avatars/sunsetsavorer.svg'
              role: 'participant'
          branch_options:
            - id: '059c0f25-500e-47aa-84bd-6baefc8bb0e5'
              brand_name: 'KFC'
              brand_icon_path: '/icons/kfc.svg'
              votes_count: 1
              members:
                - 535435345345345
            - id: '44473945-2bf4-407d-b943-4fadf091eb34'
              brand_name: 'Siria'
              brand_icon_path: '/icons/siria.svg'
              votes_count: 1
              members:
                - 2312321123112

    GetRandomGroupResponse:
      value:
        data:
          id: '81320520-65da-41cf-9fa2-61392a24ec1d'
          name: 'Комната с рандомом'
          selection_mode: 'random'
          members:
            - id: 535435345345345
              name: muhehe
              photo_url: 'https://example.com/avatars/muhehe.svg'
              role: 'owner'
            - id: 2312321123112
              name: sunsetsavorer
              photo_url: 'https://example.com/avatars/sunsetsavorer.svg'
              role: 'participant'
          branch_options:
            - id: '059c0f25-500e-47aa-84bd-6baefc8bb0e5'
              brand_name: 'KFC'
              brand_icon_path: '/icons/kfc.svg'
            - id: '44473945-2bf4-407d-b943-4fadf091eb34'
              brand_name: 'Siria'
              brand_icon_path: '/icons/siria.svg'

  requestBodies:
    Signin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SigninRequestBody'
          examples:
            Base:
              $ref: '#/components/examples/SigninRequestBody'

    UpdateUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUserRequestBody'
          examples:
            Base:
              $ref: '#/components/examples/UpdateUserRequestBody'

    CreateGroup:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateGroupRequestBody'
          examples:
            Defined:
              $ref: '#/components/examples/CreateDefinedGroupRequestBody'
            Voting:
              $ref: '#/components/examples/CreateVotingGroupRequestBody'
            Random:
              $ref: '#/components/examples/CreateRandomGroupRequestBody'

  responses:
    BadRequestError:
      description: 'bad request error response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseErrorResponse'
          examples:
            Base:
              $ref: '#/components/examples/BadRequestErrorResponse'

    UnauthorizedError:
      description: 'not authorized error response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseErrorResponse'
          examples:
            Base:
              $ref: '#/components/examples/UnauthorizedErrorResponse'

    NotFoundError:
      description: 'not found error response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseErrorResponse'
          examples:
            Base:
              $ref: '#/components/examples/NotFoundErrorResponse'

    ValidationError:
      description: 'validation error response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseErrorResponse'
          examples:
            Base:
              $ref: '#/components/examples/ValidationErrorResponse'

    EmptySuccess:
      description: 'empty success response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmptySuccessResponse'
          examples:
            Base:
              $ref: '#/components/examples/EmptySuccessResponse'

    Signin:
      description: 'success authorization'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SigninResponse'
          examples:
            Base:
              $ref: '#/components/examples/SigninResponse'

    GetBranches:
      description: 'success request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetBranchesResponse'
          examples:
            Base:
              $ref: '#/components/examples/GetBranchesResponse'

    CreateGroup:
      description: 'success group creation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateGroupResponse'
          examples:
            Base:
              $ref: '#/components/examples/CreateGroupRespone'

    GetGroups:
      description: 'success request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetGroupsResponse'
          examples:
            Base:
              $ref: '#/components/examples/GetGroupsResponse'

    GetGroup:
      description: 'success request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetGroupResponse'
          examples:
            Defined:
              $ref: '#/components/examples/GetDefinedGroupResponse'
            Voting:
              $ref: '#/components/examples/GetVotingGroupResponse'
            Random:
              $ref: '#/components/examples/GetRandomGroupResponse'

  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: Authorization